(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{332:function(t,s,a){"use strict";a.r(s);var e=a(6),p=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"深度剖析javascript-es5-amd-cmd-commonjs-es6模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度剖析javascript-es5-amd-cmd-commonjs-es6模块化"}},[t._v("#")]),t._v(" 深度剖析JavaScript ES5/AMD/CMD/COMMONJS/ES6模块化")]),t._v(" "),a("p",[t._v("前端模块化其实是一个有年代知识的考点，面试中经常会问到各种模块化标准之间的异同，其中一些模块化标准至今已经被废弃不再使用，一些模块化至今仍然在实际应用中发光发热。")]),t._v(" "),a("p",[t._v("本文尝试详解各种前端模块化标准。")]),t._v(" "),a("h2",{attrs:{id:"commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[t._v("#")]),t._v(" CommonJS")]),t._v(" "),a("p",[t._v("CommonJS 出现就是为了解决原本 JS 文件引入的不足点： "),a("strong",[t._v("模块依赖")]),t._v(" 和 "),a("strong",[t._v("全局污染")]),t._v(" 问题，它并不是 JS 本身的一个内容，而是对于模块化的一种具体实现。")]),t._v(" "),a("ul",[a("li",[t._v("CommonJS 实际上就是用 require 函数，只要引用，就会创建一个 "),a("strong",[t._v("模块的实例")]),t._v(" ，即实例化（每当引入一个文件，就会为这个文件变成一个 JS 实例）；")]),t._v(" "),a("li",[t._v("做法是通过 require 引入模块，通过 "),a("code",[t._v("module.exports")]),t._v(" 导出，并且文件加载是 "),a("strong",[t._v("同步")]),t._v(" 完成的；")]),t._v(" "),a("li",[t._v("对服务端比较友好，内涵 "),a("strong",[t._v("缓存机制")]),t._v(" ，也就是说只要 require 一个模块，那么这个模块就会被缓存，并且还会进行一次比较异同的操作，例如我修改了这个模块，那么就会 "),a("strong",[t._v("将缓存的模块替换新的模块")]),t._v(" ；")]),t._v(" "),a("li",[t._v("在 node 上运行，不依赖于客户端。")])]),t._v(" "),a("p",[t._v("而当我们引入一个模块后，其实会被解析为一个立即执行函数，类似原本 ES5 利用自执行函数封装一样，类似下面， "),a("strong",[t._v("引入的模块并不是全局变量。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __dirname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("CommonJS 至今仍然是 nodejs 的模块化标准。")]),t._v(" "),a("h2",{attrs:{id:"amd-出现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amd-出现"}},[t._v("#")]),t._v(" AMD 出现")]),t._v(" "),a("p",[t._v("看到 AMD，你可能会情不自禁地说 AMD YES！但此 AMD 并非彼 AMD。")]),t._v(" "),a("p",[t._v("从上问我们知道了 CommonJS 只能在 node 环境下使用，在浏览器上无法使用，而 CommonJS 本身的实现思路是不错的，于是创造了 AMD（Asynchronous Module Definition）异步模块定义，是通过 "),a("strong",[t._v("RequireJS")]),t._v(" 来实现，区别于 CommonJS，它是 "),a("strong",[t._v("异步")]),t._v(" 的。")]),t._v(" "),a("p",[t._v("定义模块： "),a("code",[t._v("define(moduleName, [module], factory)")])]),t._v(" "),a("p",[t._v("引入模块： "),a("code",[t._v("require([module], callback)")])]),t._v(" "),a("p",[t._v("下面看这个例子")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/457469ddb0b5410dab47ecaecd8f2910~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("moduleB 此时它依赖于模块 A，按照以下方式进行依赖。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/900a9120ce26482e9d04124d2218387f~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("然后在 index.js 文件中我们需要通过 "),a("code",[t._v("require.config")]),t._v(" 来配置我们的模块路径，如若没有配置的话，就会报错找不到。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa67ed094f254b4885f9266c7e5e80bb~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("注意点！")]),t._v(" 上述依赖模块 "),a("strong",[t._v("只有当全部加载完毕之后，才会执行后边的回调函数。")]),t._v(" 这种方式就是我们比较疑惑的一个名词： "),a("strong",[t._v("依赖前置。")])]),t._v(" "),a("p",[t._v("因此，它不用考虑模块的引入顺序，并且保证是规范化的输入输出，同时它会动态地创建 script 标签，如下图所示，它使用了 async 来进行异步加载。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c409c1c3225485d9e84efe870540ec9~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"引出-cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引出-cmd"}},[t._v("#")]),t._v(" 引出 CMD")]),t._v(" "),a("p",[t._v("此时，阿里也为模块化作了贡献，推出了 CMD（Common Module Definition）通用模块定义，它参考了 AMD，引入了 "),a("code",[t._v("sea.js")]),t._v(" 。")]),t._v(" "),a("p",[t._v("定义模块： "),a("code",[t._v("define(function (require, exports, module) {})")])]),t._v(" "),a("p",[t._v("引入模块： "),a("code",[t._v("sea.js([module路径], function(moduleA, moduleB, moduleC) {})")])]),t._v(" "),a("p",[t._v("下面看个例子：")]),t._v(" "),a("p",[t._v("定义一个模块 moduleA")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52c400b688294feebd57999ef8d98623~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("再来定义一个模块 moduleB，此时它依赖于模块 A，按照如下方式进行依赖。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/146a6b04380d4d3aab840a59ed593b8b~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("然后在 index.js 文件中，我们需要首先通过数组确定模块路径，如下所示：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("seajs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'module_a.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'module_b.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("moduleA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" moduleB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moduleA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moduleB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("下面总结一下 CMD 相关知识：")]),t._v(" "),a("p",[t._v("通过 require 加载，define 定义，exports 导出（使用 return 同理），module 操作模块。")]),t._v(" "),a("p",[t._v("而在使用模块时，需要配置相关 url，依赖加载完毕之后，再执行回调函数，这里和 AMD 没啥区别。")]),t._v(" "),a("p",[a("strong",[t._v("注意点！")]),t._v(" 但是下面就有本质上不同了， "),a("strong",[t._v("CMD 就进依赖、按需加载，")]),t._v(" 增强灵活性。")]),t._v(" "),a("h2",{attrs:{id:"es6-模块化登场"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块化登场"}},[t._v("#")]),t._v(" ES6 模块化登场")]),t._v(" "),a("p",[t._v("JS 语言标准中的模块化规范，属于语言本身的一种新特性。")]),t._v(" "),a("p",[t._v("引入模块： "),a("code",[t._v("import module from '模块路径'")])]),t._v(" "),a("p",[t._v("导出模块： "),a("code",[t._v("export module")])]),t._v(" "),a("p",[t._v("下面看这个例子：")]),t._v(" "),a("p",[t._v("定义一个模块 moduleA")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b371cba56e68462782de1c722fcd750f~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("在定义一个模块 moduleB，此时它依赖于模块 A，按照以下方式进行依赖。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af41c25ee9b74086a2b621664d0cab5b~tplv-k3u1fbpfcp-zoom-1.image?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("然后在 index.js 文件中我们需要配置我们的模块路径，如若没有配置的话，就会报错找不到。 "),a("img",{attrs:{src:"https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfcb275888f0490ca8d84e8aedc86d11~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),t._v(" "),a("p",[t._v("ES6 模块化 与 CommonJS 对比：")]),t._v(" "),a("p",[t._v("先做一个实验，假设")]),t._v(" "),a("p",[t._v("在 export.js 中我们导出一个变量 a，并且进行了自加操作：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9385f74ff5fb4de0ab9c9d84f798fa23~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),t._v(" "),a("p",[t._v("在 common.js 文件中，我们写入如下代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/408b2a0fd1c740b199c77b4856e38227~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),t._v(" "),a("p",[t._v("在 es6.js 文件中，我们写入如下代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1eb2106be651401b90318d74c64d8450~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),t._v(" "),a("p",[t._v("最终结果如下： "),a("img",{attrs:{src:"https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c73633ec304b4dbf902e2fabffaae4b6~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),t._v(" "),a("p",[t._v("通过例子，我们来总结一下：")]),t._v(" "),a("p",[t._v("区别1：")]),t._v(" "),a("ul",[a("li",[t._v("common.js 模块输出的是一个值的拷贝")]),t._v(" "),a("li",[t._v("ES6 模块输出的是一个值得引用")])]),t._v(" "),a("p",[t._v("区别2：")]),t._v(" "),a("ul",[a("li",[t._v("common.js 运行在服务端，因此模块是在运行时加载，即程序执行时 "),a("code",[t._v("require")]),t._v(" 才会加载。")]),t._v(" "),a("li",[t._v("ES6 模块在编译时加载")])])])}),[],!1,null,null,null);s.default=p.exports}}]);